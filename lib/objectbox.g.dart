// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/model/notification.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4684751407987440424),
      name: 'Notification',
      lastPropertyId: const IdUid(12, 872383792838145339),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7185933799112113084),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4882198118541050166),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3087857465414964711),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2610388088433432889),
            name: 'body',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5359073673485959773),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4592819228296841062),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6122931191184655000),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3021258819598597460),
            name: 'read',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3824052778952918804),
            name: 'ack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5047953282115359255),
            name: 'categoryId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 872383792838145339),
            name: 'messageId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4684751407987440424),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3723442343925515041],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Notification: EntityDefinition<Notification>(
        model: _entities[0],
        toOneRelations: (Notification object) => [],
        toManyRelations: (Notification object) => {},
        getId: (Notification object) => object.id,
        setId: (Notification object, int id) {
          object.id = id;
        },
        objectToFB: (Notification object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final bodyOffset =
              object.body == null ? null : fbb.writeString(object.body!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final ackOffset =
              object.ack == null ? null : fbb.writeString(object.ack!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          final messageIdOffset = object.messageId == null
              ? null
              : fbb.writeString(object.messageId!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, bodyOffset);
          fbb.addOffset(4, titleOffset);
          fbb.addOffset(5, categoryOffset);
          fbb.addInt64(7, object.createdAt?.millisecondsSinceEpoch);
          fbb.addBool(8, object.read);
          fbb.addOffset(9, ackOffset);
          fbb.addOffset(10, categoryIdOffset);
          fbb.addOffset(11, messageIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final ackParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final messageIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final readParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final categoryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final object = Notification(
              type: typeParam,
              body: bodyParam,
              ack: ackParam,
              messageId: messageIdParam,
              createdAt: createdAtParam,
              read: readParam,
              description: descriptionParam,
              title: titleParam,
              category: categoryParam,
              categoryId: categoryIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Notification] entity fields to define ObjectBox queries.
class Notification_ {
  /// see [Notification.id]
  static final id =
      QueryIntegerProperty<Notification>(_entities[0].properties[0]);

  /// see [Notification.type]
  static final type =
      QueryStringProperty<Notification>(_entities[0].properties[1]);

  /// see [Notification.description]
  static final description =
      QueryStringProperty<Notification>(_entities[0].properties[2]);

  /// see [Notification.body]
  static final body =
      QueryStringProperty<Notification>(_entities[0].properties[3]);

  /// see [Notification.title]
  static final title =
      QueryStringProperty<Notification>(_entities[0].properties[4]);

  /// see [Notification.category]
  static final category =
      QueryStringProperty<Notification>(_entities[0].properties[5]);

  /// see [Notification.createdAt]
  static final createdAt =
      QueryIntegerProperty<Notification>(_entities[0].properties[6]);

  /// see [Notification.read]
  static final read =
      QueryBooleanProperty<Notification>(_entities[0].properties[7]);

  /// see [Notification.ack]
  static final ack =
      QueryStringProperty<Notification>(_entities[0].properties[8]);

  /// see [Notification.categoryId]
  static final categoryId =
      QueryStringProperty<Notification>(_entities[0].properties[9]);

  /// see [Notification.messageId]
  static final messageId =
      QueryStringProperty<Notification>(_entities[0].properties[10]);
}
